<?php
echo dirname(__FILE__);
echo escapeshellarg(__FILE__);
echo escapeshellcmd(__FILE__);
echo phpversion();
//echo phpinfo();
//echo 'MMM';

$output = shell_exec('ls -lart');
echo "<pre>$output</pre>";
echo exec('whoami');
//exec('ping 127.0.0.1');
//exec('ls /usr');
//shell_exec('ls /usr');
//system('ls '.escapeshellarg($dir));
system('ls /usr');//system('ll /usr');
//passthru('ls /usr');

$descriptorspec = array(
   0 => array("pipe", "r"),  // stdin is a pipe that the child will read from
   1 => array("pipe", "w"),  // stdout is a pipe that the child will write to
   2 => array("file", "/tmp/error-output.txt", "a") // stderr is a file to write to
);
$cwd = '/tmp/';
$env = array('some_option' => 'aeiou');
$process = proc_open('php', $descriptorspec, $pipes, $cwd, $env);
if (is_resource($process)) {
    // $pipes now looks like this:
    // 0 => writeable handle connected to child stdin
    // 1 => readable handle connected to child stdout
    // Any error output will be appended to /tmp/error-output.txt

    fwrite($pipes[0],'<?php print_r($_ENV); ?>'); //print_r
    fclose($pipes[0]);

    echo stream_get_contents($pipes[1]);
    fclose($pipes[1]);

    // It is important that you close any pipes before calling
    // proc_close in order to avoid a deadlock
    $return_value = proc_close($process);

   // echo "command returned $return_value\n";
}
echo "<br>";echo "git cmd test:";
$descriptorspec = array(
   0 => array("pipe", "r"),  // stdin is a pipe that the child will read from
   1 => array("pipe", "w"),  // stdout is a pipe that the child will write to
   2 => array("file", "/tmp/error-output.txt", "a") // stderr is a file to write to
);
$cwd = NULL;
$env = NULL;
$process = proc_open('/usr/local/bin/git branch', $descriptorspec, $pipes, $cwd, $env);
echo is_resource($process) == true;
if(is_resource($process)){
	fwrite($pipes[0],'start\n');
	echo ("\n\nStart ....".fgets($pipes[1],4096)); //get answer
  fwrite($pipes[0], "get\n");    // send get
  echo ("Get: ".fgets($pipes[1],4096));    //get answer	
	echo stream_get_contents($pipes[1]);
	fclose($pipes[0]);
	fclose($pipes[1]);
}
proc_close($process);

// ########################################################################################################################
// ########################################################################################################################
// ########################################################################################################################

handleExtenalCmd();
handleAwk();
// ########################################
function handleExtenalCmd(){
  // use the buitl-in functions to execute
  //echo $HEAD_PATH;
  $test = "awk '{print $0}' $REF_HEAD_PATH";//'whoami';//'ll -t';// 'git status';
  echo $test;
  echo dirname(__FILE__);
  echo shell_exec($test);
  echo passthru($test);
  echo exec($test);
  echo system($test) == false; // failed execution 

  $test = "ls /d";     
  exec($test,$array);         
  var_dump($array);   
  $array =   array(  
     array("pipe","r"),     
     array("pipe","w"),     
     array("pipe","w")     
   );     
  $fp = proc_open($test,$array,$pipes);     
  echo stream_get_contents($pipes[1]);      
  proc_close($fp);  
}

// ########################################handle awk cmd
function handleAwk(){
  echo "awk '{print \"sha1=\" $1}' $ORIG_HEAD_PATH";
  echo exec("awk '{print \"sha1=\" $1}' $ORIG_HEAD_PATH");
  echo exec('whoami');
  passthru('ll');
  //$output = shell_exec('ll -t');
  //echo "$output";
  //shell_exec( 'cd /srv/www/git-repo/ && git reset --hard HEAD && git pull');
}

?>

